name: Build and Deploy Test Service

on:
  push:
    branches:
      - main
      - development
    tags:
      - "*"
  pull_request:
    branches:
      - main
      - development

env:
  app_name: test-service
  project_name: zs-products
  cluster_name: gofr-web

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up  Go 1.21
        uses: actions/setup-go@v4
        with:
          go-version: 1.21
        id: Go

      - name: Get dependencies
        run: |
          go mod download

      - name: Build
        run: |
          CGO_ENABLED=0 GOOS=linux go build -ldflags '-extldflags "-static"' -o build/test-service .

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: build

  dockerize_stage:
    runs-on: ubuntu-latest
    name: üê≥ Dockerize - Stage
    needs: [build]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/development'}}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts

      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCR_KEY }}

      - name: Build and Push Image
        uses: docker/build-push-action@v3
        with:
          push: true
          context: ./
          file: ./Dockerfile
          tags: gcr.io/${{ env.project_name }}/zs-products/${{ env.app_name }}:${{ github.sha }}

      - uses: actions/upload-artifact@v2
        with:
          name: variables
          path: variables


  dockerize_prod:
    runs-on: ubuntu-latest
    name: üê≥ Dockerize - Prod
    needs: [build]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main'}}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts

      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCR_KEY }}

      - name: Build and Push Image
        uses: docker/build-push-action@v3
        with:
          push: true
          context: ./
          file: ./Dockerfile
          tags: gcr.io/gofr-web/zs-products/${{ env.app_name }}:${{ github.sha }}

      - uses: actions/upload-artifact@v2
        with:
          name: variables
          path: variables

  stage_deployment:
    runs-on: ubuntu-latest
    name: üöÄ Deploy to Stage
    needs: [dockerize_stage]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/development'}}
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{env.project_name}}
          service_account_key: ${{ secrets.DEPLOY_KEY}}
          export_default_credentials: true

      - name: Update Kubectl component
        run: gcloud --quiet components update kubectl

      - name: Set GCloud Project and Fetch Cluster Credentials
        run: gcloud container clusters get-credentials ${{env.cluster_name}} --zone=us-central1 --project=${{env.project_name}}

      - name: Set Deployment Image
        run: kubectl set image deployment/${{ env.app_name }} ${{ env.app_name }}=gcr.io/${{env.project_name}}/zs-products/${{ env.app_name }}:${{ github.sha }} --namespace zopping-stage


  prod_deployment:
    runs-on: ubuntu-latest
    name: üöÄ Deploy to Prod
    needs: [dockerize_prod]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main'}}
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{env.project_name}}
          service_account_key: ${{ secrets.DEPLOY_KEY}}
          export_default_credentials: true

      - name: Update Kubectl component
        run: gcloud --quiet components update kubectl

      - name: Set GCloud Project and Fetch Cluster Credentials
        run: gcloud container clusters get-credentials ${{env.cluster_name}} --zone=us-central1 --project=${{env.project_name}}

      - name: Set App Version
        run: kubectl set env deployment/${{ env.app_name }} APP_VERSION=${{ env.RELEASE_VERSION }} --namespace gofr-web

      - name: Set Deployment Image
        run: kubectl set image deployment/${{ env.app_name }} ${{ env.app_name }}=gcr.io/${{env.project_name}}/zs-products/${{ env.app_name }}:${{ env.RELEASE_VERSION }} --namespace gofr-web
